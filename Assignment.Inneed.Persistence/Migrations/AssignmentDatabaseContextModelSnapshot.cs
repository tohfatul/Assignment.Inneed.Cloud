// <auto-generated />
using System;
using Assignment.Inneed.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Inneed.Persistence.Migrations
{
    [DbContext(typeof(AssignmentDatabaseContext))]
    partial class AssignmentDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment.Inneed.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2096),
                            DateModified = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2123),
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2126),
                            DateModified = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2127),
                            RoleName = "Standard"
                        });
                });

            modelBuilder.Entity("Assignment.Inneed.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2951),
                            DateModified = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2955),
                            Email = "admin@admin.com",
                            FullName = "Admin User",
                            PasswordHash = new byte[] { 179, 252, 89, 63, 218, 255, 47, 153, 168, 119, 42, 179, 212, 118, 217, 189, 228, 91, 15, 28, 51, 136, 196, 97, 107, 102, 28, 174, 39, 195, 147, 83, 179, 226, 208, 30, 20, 147, 152, 12, 91, 222, 61, 249, 177, 152, 118, 231, 240, 23, 178, 84, 86, 235, 128, 151, 223, 75, 223, 83, 221, 232, 142, 14 },
                            PasswordSalt = new byte[] { 178, 139, 165, 58, 177, 48, 92, 67, 68, 81, 172, 186, 197, 206, 71, 92, 245, 80, 64, 180, 58, 236, 141, 51, 237, 109, 12, 10, 214, 197, 162, 169, 9, 53, 69, 83, 216, 150, 0, 71, 150, 132, 174, 122, 26, 55, 119, 193, 154, 101, 134, 109, 92, 174, 235, 143, 171, 197, 63, 5, 66, 230, 24, 243, 81, 166, 10, 14, 192, 127, 92, 240, 87, 237, 15, 206, 1, 154, 65, 191, 153, 11, 39, 159, 175, 28, 43, 137, 151, 245, 229, 19, 135, 162, 99, 174, 174, 188, 232, 226, 0, 215, 120, 119, 88, 127, 227, 145, 246, 38, 111, 118, 139, 44, 230, 233, 137, 98, 152, 28, 72, 126, 141, 70, 43, 104, 41, 160 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2964),
                            DateModified = new DateTime(2023, 11, 24, 2, 41, 20, 570, DateTimeKind.Local).AddTicks(2965),
                            Email = "standard@standard.com",
                            FullName = "Standard User",
                            PasswordHash = new byte[] { 179, 252, 89, 63, 218, 255, 47, 153, 168, 119, 42, 179, 212, 118, 217, 189, 228, 91, 15, 28, 51, 136, 196, 97, 107, 102, 28, 174, 39, 195, 147, 83, 179, 226, 208, 30, 20, 147, 152, 12, 91, 222, 61, 249, 177, 152, 118, 231, 240, 23, 178, 84, 86, 235, 128, 151, 223, 75, 223, 83, 221, 232, 142, 14 },
                            PasswordSalt = new byte[] { 178, 139, 165, 58, 177, 48, 92, 67, 68, 81, 172, 186, 197, 206, 71, 92, 245, 80, 64, 180, 58, 236, 141, 51, 237, 109, 12, 10, 214, 197, 162, 169, 9, 53, 69, 83, 216, 150, 0, 71, 150, 132, 174, 122, 26, 55, 119, 193, 154, 101, 134, 109, 92, 174, 235, 143, 171, 197, 63, 5, 66, 230, 24, 243, 81, 166, 10, 14, 192, 127, 92, 240, 87, 237, 15, 206, 1, 154, 65, 191, 153, 11, 39, 159, 175, 28, 43, 137, 151, 245, 229, 19, 135, 162, 99, 174, 174, 188, 232, 226, 0, 215, 120, 119, 88, 127, 227, 145, 246, 38, 111, 118, 139, 44, 230, 233, 137, 98, 152, 28, 72, 126, 141, 70, 43, 104, 41, 160 },
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Assignment.Inneed.Domain.User", b =>
                {
                    b.HasOne("Assignment.Inneed.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
